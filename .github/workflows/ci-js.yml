name: ORT Analysis for JavaScript Project

on:
  pull_request:
    paths:
      # todo: skip node_modules
      - '**/**/package.json' # Trigger when package.json changes

jobs:
  ort-analysis:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Debug GitHub Token Permissions
        run: |
          echo "GitHub Token permissions:"
          echo "${{ toJSON(github.token_permissions) }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for diff check

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # - name: Install npm dependencies
      #   run: npm install

      - name: Create Output Directory
        run: mkdir -p ort-results

      - name: Set Permissions for $PWD and ort-results
        run: |
          sudo chown -R $(whoami) "$PWD"  # Ensure $PWD has read/write permissions
          sudo chmod -R 777 "$PWD"        # Make $PWD writable

          mkdir -p ort-results              # Ensure ort-results directory exists
          sudo chown -R $(whoami) "$PWD/ort-results"  # Set permissions for ort-results
          sudo chmod -R 777 "$PWD/ort-results"        # Make ort-results writable

      - name: Run ORT analyze and extract dependencies
        id: ort-analyze
        run: |
          echo "Running ORT analyze..."

          json_output=$(docker run --rm -v "$PWD:$PWD" -w "$PWD" ghcr.io/oss-review-toolkit/ort:latest analyze -i $PWD -o $PWD/ort-results --output-formats JSON)

          echo "==== pwd:"
          ls -l

          # ls -l ./workspace
          echo "==== ort output:"
          ls -l ort-results
          ls -l ./ort-results

          echo "==== ort output:"
          json_output=$(cat ./ort-results/analyzer-result.json)

          echo "======== json output"

          # dependencies=$(echo "$json_output" | jq -r '.analyzer.result.projects[].scopes[].dependencies[].id' | tr '\n' ',')
          # dependencies=$(cat ort-results/analyzer/result.json | jq -r '.analyzer.result.projects[].scopes[].dependencies[] | select(.vulnerabilities != null) | .id')
          # dependencies=$(echo "$json_output" | jq -r '.analyzer.result.projects[].scopes[].dependencies[].id' | tr '\n' ',')

          # dependencies=$(echo "$json_output" | jq -r '.analyzer.result.packages[] | select(.vulnerabilities != null and (.vulnerabilities | length > 0)) | .id'

          dependencies=$(echo "$json_output")
          echo "======== dependencies"
          echo "$dependencies"
          packages=$(echo "$dependencies")
          # echo "$packages" >> $GITHUB_ENV

          echo "Running ORT scanner for security vulnerabilities..."
          docker run --rm -v "$PWD:$PWD" \
           -e ORT_CONFIG='{
              "ort": {
                "config": {
                  "withExplicitSealedTypes": true
                }
              }
            }' \
            ghcr.io/oss-review-toolkit/ort:latest scan \
            -i ort-results/analyzer-result.json --output-formats JSON --output-dir ort-results

          echo "==== ort scan:"
          echo "==== pwd:"
          ls -l

          echo "==== ort results:"
          ls -l ort-results
          ls -l ./ort-results

          vulnerabilities=$(jq -c '[.scanner.results.scanResults[].summary.vulnerabilities[]? | {id, severity, title}]' < ort-results/scanner-result.json)

          vulnerabilities="${vulnerabilities:-[]}"  # Ensure valid JSON string
          echo "vulnerabilities=$vulnerabilities" >> "$GITHUB_ENV"
          echo "Detected vulnerable packages:"
          echo "$vulnerabilities"

          echo "Running ORT advisor for security vulnerabilities..."
          docker run --rm -v "$PWD:$PWD" \
            -e ORT_ADVISOR_OSV_ENABLED=true \
            -e ORT_ADVISOR_GITHUB_ENABLED=true \
            ghcr.io/oss-review-toolkit/ort:latest advisor \
            -i ort-results/analyzer-result.json --output-formats JSON --output-dir ort-results

          echo "==== ort results:"
          ls -l ort-results
          ls -l ./ort-results

      - name: Check for New Dependencies
        id: check_new_deps
        run: |
          git fetch origin $GITHUB_BASE_REF
          if git diff --name-only origin/$GITHUB_BASE_REF..HEAD -- package.json | grep 'package.json'; then
            echo "::set-output name=new_deps::true"
          else
            echo "::set-output name=new_deps::false"
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const vulnerabilities2 = `${{ env.vulnerabilities }}`;
            console.log(vulnerabilities2);
            const vulnerabilities = `${{ steps.extract-vulnerabilities.outputs.vulnerabilities }}`;
            console.log(vulnerabilities);

            const ortResult = `${{ env.ORT_RESULT }}`.split('\n').map(p => p.replace(/_/g, ' '));
            const packages = `${{ steps.ort_analysis.outputs.packages }}`.split('\n').map(p => p.replace(/_/g, ' '));
            const newDeps = `${{ steps.check_new_deps.outputs.new_deps }}` === 'true';
            const rawPackages = `JSON.stringify(${{ steps.ort_analysis.outputs.packages }})`;
            const outputPackages = `${{ steps.ort_analysis.outputs.packages }}`;

            let commentBody = `### ORT Scan Results\n`;
            commentBody += `\n**New dependencies added:** ${newDeps ? 'Yes' : 'No'}`;
            commentBody += `\n#### Dependencies:\n${packages.map(p => `- ${p}`).join('\n')}\n`;
            commentBody += `\n#### Raw packages:\n${rawPackages}\n`;
            commentBody += `\n#### Output packages:\n${outputPackages}\n`;
            commentBody += `\n#### Ort result:\n${ortResult}\n`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });