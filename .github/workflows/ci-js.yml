name: ORT Analysis for JavaScript Project

on:
  pull_request:
    paths:
      # todo: skip node_modules
      - '**/**/package.json' # Trigger when package.json changes

jobs:
  ort-analysis:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Debug GitHub Token Permissions
        run: |
          echo "GitHub Token permissions:"
          echo "${{ toJSON(github.token_permissions) }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for diff check

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install npm dependencies
        run: npm install

      - name: Run ORT analyze and extract dependencies
        id: ort-analyze
        run: |
          echo "Running ORT analyze..."
          json_output=$(docker run --rm -v "$PWD:/ort" ghcr.io/oss-review-toolkit/ort:latest analyze -i /ort -o /ort-output --package-manager NPM --output-formats JSON)

          # Output the JSON result to the console
          echo "$json_output"

          # Now process the output with jq and store the dependencies
          dependencies=$(echo "$json_output" | jq -r '.analyzer.result.projects[].scopes[].dependencies[].id' | tr '\n' ',')

          echo "$dependencies"
          echo "packages=${dependencies}" >> $GITHUB_ENV
          echo "Detected packages: $dependencies"

      # - name: Run ORT analyze
      #   id: ort-analyze
      #   uses: oss-review-toolkit/ort-ci-github-action@v1
      #   with:
      #     command: "analyze"
      #     args: "--package-managers NPM --output-formats JSON --output-dir ort-results"
      #     input-path: ".."

      # - name: Debug ORT Output
      #   run: |
      #     echo "Listing ORT output directory..."
      #     ls -R ort-results || echo "ORT results directory not found!"
      #     echo "Checking default ORT directories..."
      #     ls -R ort || echo "Default ORT directory not found!"

      # - name: Extract and set dependencies
      #   id: extract-dependencies
      #   run: |
      #     ORT_JSON_PATH=$(find ort-results ort -name "analyzer-result.json" 2>/dev/null | head -n 1)
      #     if [[ -z "$ORT_JSON_PATH" ]]; then
      #       echo "Error: analyzer-result.json not found!"
      #       exit 1
      #     fi
      #     echo "Found ORT JSON file at $ORT_JSON_PATH"
      #     dependencies=$(jq -r '.analyzer.result.projects[].scopes[].dependencies[].id' "$ORT_JSON_PATH" | tr '\n' ',')
      #     echo "packages=${dependencies}" >> $GITHUB_ENV

      - name: Check for New Dependencies
        id: check_new_deps
        run: |
          git fetch origin $GITHUB_BASE_REF
          if git diff --name-only origin/$GITHUB_BASE_REF..HEAD -- package.json | grep 'package.json'; then
            echo "::set-output name=new_deps::true"
          else
            echo "::set-output name=new_deps::false"
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const ortResult = `${{ env.ORT_RESULT }}`.split('\n').map(p => p.replace(/_/g, ' '));
            const packages = `${{ steps.ort_analysis.outputs.packages }}`.split('\n').map(p => p.replace(/_/g, ' '));
            const newDeps = `${{ steps.check_new_deps.outputs.new_deps }}` === 'true';
            const rawPackages = `JSON.stringify(${{ steps.ort_analysis.outputs.packages }})`;
            const outputPackages = `${{ steps.ort_analysis.outputs.packages }}`;

            let commentBody = `### ORT Scan Results\n`;
            commentBody += `\n**New dependencies added:** ${newDeps ? 'Yes' : 'No'}`;
            commentBody += `\n#### Dependencies:\n${packages.map(p => `- ${p}`).join('\n')}\n`;
            commentBody += `\n#### Raw packages:\n${rawPackages}\n`;
            commentBody += `\n#### Output packages:\n${outputPackages}\n`;
            commentBody += `\n#### Ort result:\n${ortResult}\n`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });